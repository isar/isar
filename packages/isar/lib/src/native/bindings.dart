// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class IsarCoreBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IsarCoreBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IsarCoreBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<CString> isar_string(ffi.Pointer<ffi.Uint16> chars, int length) {
    return _isar_string(chars, length);
  }

  late final _isar_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CString> Function(ffi.Pointer<ffi.Uint16>, ffi.Uint32)
    >
  >('isar_string');
  late final _isar_string =
      _isar_stringPtr
          .asFunction<
            ffi.Pointer<CString> Function(ffi.Pointer<ffi.Uint16>, int)
          >();

  void isar_buffer_free(ffi.Pointer<ffi.Uint8> value, int capacity) {
    return _isar_buffer_free(value, capacity);
  }

  late final _isar_buffer_freePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32)>
  >('isar_buffer_free');
  late final _isar_buffer_free =
      _isar_buffer_freePtr
          .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  int isar_get_error(ffi.Pointer<ffi.Pointer<ffi.Uint8>> value) {
    return _isar_get_error(value);
  }

  late final _isar_get_errorPtr = _lookup<
    ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>
  >('isar_get_error');
  late final _isar_get_error =
      _isar_get_errorPtr
          .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  ffi.Pointer<CIsarReader> isar_cursor_next(
    ffi.Pointer<CIsarCursor> cursor,
    int id,
    ffi.Pointer<CIsarReader> old_reader,
  ) {
    return _isar_cursor_next(cursor, id, old_reader);
  }

  late final _isar_cursor_nextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarReader> Function(
        ffi.Pointer<CIsarCursor>,
        IsarI64,
        ffi.Pointer<CIsarReader>,
      )
    >
  >('isar_cursor_next');
  late final _isar_cursor_next =
      _isar_cursor_nextPtr
          .asFunction<
            ffi.Pointer<CIsarReader> Function(
              ffi.Pointer<CIsarCursor>,
              int,
              ffi.Pointer<CIsarReader>,
            )
          >();

  void isar_cursor_free(
    ffi.Pointer<CIsarCursor> cursor,
    ffi.Pointer<CIsarReader> reader,
  ) {
    return _isar_cursor_free(cursor, reader);
  }

  late final _isar_cursor_freePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarCursor>, ffi.Pointer<CIsarReader>)
    >
  >('isar_cursor_free');
  late final _isar_cursor_free =
      _isar_cursor_freePtr
          .asFunction<
            void Function(ffi.Pointer<CIsarCursor>, ffi.Pointer<CIsarReader>)
          >();

  ffi.Pointer<CIsarReader> isar_query_cursor_next(
    ffi.Pointer<CIsarQueryCursor> cursor,
    ffi.Pointer<CIsarReader> old_reader,
  ) {
    return _isar_query_cursor_next(cursor, old_reader);
  }

  late final _isar_query_cursor_nextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarReader> Function(
        ffi.Pointer<CIsarQueryCursor>,
        ffi.Pointer<CIsarReader>,
      )
    >
  >('isar_query_cursor_next');
  late final _isar_query_cursor_next =
      _isar_query_cursor_nextPtr
          .asFunction<
            ffi.Pointer<CIsarReader> Function(
              ffi.Pointer<CIsarQueryCursor>,
              ffi.Pointer<CIsarReader>,
            )
          >();

  void isar_query_cursor_free(
    ffi.Pointer<CIsarQueryCursor> cursor,
    ffi.Pointer<CIsarReader> reader,
  ) {
    return _isar_query_cursor_free(cursor, reader);
  }

  late final _isar_query_cursor_freePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarQueryCursor>, ffi.Pointer<CIsarReader>)
    >
  >('isar_query_cursor_free');
  late final _isar_query_cursor_free =
      _isar_query_cursor_freePtr
          .asFunction<
            void Function(
              ffi.Pointer<CIsarQueryCursor>,
              ffi.Pointer<CIsarReader>,
            )
          >();

  void isar_connect_dart_api(ffi.Pointer<ffi.Void> ptr) {
    return _isar_connect_dart_api(ptr);
  }

  late final _isar_connect_dart_apiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'isar_connect_dart_api',
      );
  late final _isar_connect_dart_api =
      _isar_connect_dart_apiPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CFilter> isar_filter_is_null(int property_index) {
    return _isar_filter_is_null(property_index);
  }

  late final _isar_filter_is_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFilter> Function(ffi.Uint16)>>(
        'isar_filter_is_null',
      );
  late final _isar_filter_is_null = _isar_filter_is_nullPtr
      .asFunction<ffi.Pointer<CFilter> Function(int)>(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_equal(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_equal(property_index, value, case_sensitive);
  }

  late final _isar_filter_equalPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_equal');
  late final _isar_filter_equal = _isar_filter_equalPtr.asFunction<
    ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
  >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_greater(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_greater(property_index, value, case_sensitive);
  }

  late final _isar_filter_greaterPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_greater');
  late final _isar_filter_greater = _isar_filter_greaterPtr.asFunction<
    ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
  >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_greater_or_equal(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_greater_or_equal(property_index, value, case_sensitive);
  }

  late final _isar_filter_greater_or_equalPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_greater_or_equal');
  late final _isar_filter_greater_or_equal = _isar_filter_greater_or_equalPtr
      .asFunction<
        ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
      >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_less(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_less(property_index, value, case_sensitive);
  }

  late final _isar_filter_lessPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_less');
  late final _isar_filter_less = _isar_filter_lessPtr.asFunction<
    ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
  >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_less_or_equal(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_less_or_equal(property_index, value, case_sensitive);
  }

  late final _isar_filter_less_or_equalPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_less_or_equal');
  late final _isar_filter_less_or_equal = _isar_filter_less_or_equalPtr
      .asFunction<
        ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
      >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_between(
    int property_index,
    ffi.Pointer<CIsarValue> lower,
    ffi.Pointer<CIsarValue> upper,
    bool case_sensitive,
  ) {
    return _isar_filter_between(property_index, lower, upper, case_sensitive);
  }

  late final _isar_filter_betweenPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_between');
  late final _isar_filter_between = _isar_filter_betweenPtr.asFunction<
    ffi.Pointer<CFilter> Function(
      int,
      ffi.Pointer<CIsarValue>,
      ffi.Pointer<CIsarValue>,
      bool,
    )
  >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_string_starts_with(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_string_starts_with(
      property_index,
      value,
      case_sensitive,
    );
  }

  late final _isar_filter_string_starts_withPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_string_starts_with');
  late final _isar_filter_string_starts_with =
      _isar_filter_string_starts_withPtr.asFunction<
        ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
      >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_string_ends_with(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_string_ends_with(property_index, value, case_sensitive);
  }

  late final _isar_filter_string_ends_withPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_string_ends_with');
  late final _isar_filter_string_ends_with = _isar_filter_string_ends_withPtr
      .asFunction<
        ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
      >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_string_contains(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_string_contains(property_index, value, case_sensitive);
  }

  late final _isar_filter_string_containsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_string_contains');
  late final _isar_filter_string_contains = _isar_filter_string_containsPtr
      .asFunction<
        ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
      >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_string_matches(
    int property_index,
    ffi.Pointer<CIsarValue> value,
    bool case_sensitive,
  ) {
    return _isar_filter_string_matches(property_index, value, case_sensitive);
  }

  late final _isar_filter_string_matchesPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
        ffi.Bool,
      )
    >
  >('isar_filter_string_matches');
  late final _isar_filter_string_matches = _isar_filter_string_matchesPtr
      .asFunction<
        ffi.Pointer<CFilter> Function(int, ffi.Pointer<CIsarValue>, bool)
      >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_nested(
    int property_index,
    ffi.Pointer<CFilter> filter,
  ) {
    return _isar_filter_nested(property_index, filter);
  }

  late final _isar_filter_nestedPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(ffi.Uint16, ffi.Pointer<CFilter>)
    >
  >('isar_filter_nested');
  late final _isar_filter_nested = _isar_filter_nestedPtr
      .asFunction<ffi.Pointer<CFilter> Function(int, ffi.Pointer<CFilter>)>(
        isLeaf: true,
      );

  ffi.Pointer<CFilter> isar_filter_and(
    ffi.Pointer<ffi.Pointer<CFilter>> filters,
    int lenght,
  ) {
    return _isar_filter_and(filters, lenght);
  }

  late final _isar_filter_andPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Pointer<ffi.Pointer<CFilter>>,
        ffi.Uint32,
      )
    >
  >('isar_filter_and');
  late final _isar_filter_and = _isar_filter_andPtr.asFunction<
    ffi.Pointer<CFilter> Function(ffi.Pointer<ffi.Pointer<CFilter>>, int)
  >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_or(
    ffi.Pointer<ffi.Pointer<CFilter>> filters,
    int lenght,
  ) {
    return _isar_filter_or(filters, lenght);
  }

  late final _isar_filter_orPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CFilter> Function(
        ffi.Pointer<ffi.Pointer<CFilter>>,
        ffi.Uint32,
      )
    >
  >('isar_filter_or');
  late final _isar_filter_or = _isar_filter_orPtr.asFunction<
    ffi.Pointer<CFilter> Function(ffi.Pointer<ffi.Pointer<CFilter>>, int)
  >(isLeaf: true);

  ffi.Pointer<CFilter> isar_filter_not(ffi.Pointer<CFilter> filter) {
    return _isar_filter_not(filter);
  }

  late final _isar_filter_notPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<CFilter> Function(ffi.Pointer<CFilter>)>
  >('isar_filter_not');
  late final _isar_filter_not = _isar_filter_notPtr
      .asFunction<ffi.Pointer<CFilter> Function(ffi.Pointer<CFilter>)>(
        isLeaf: true,
      );

  int isar_insert(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
    int count,
    ffi.Pointer<ffi.Pointer<CIsarWriter>> insert,
  ) {
    return _isar_insert(isar, txn, collection_index, count, insert);
  }

  late final _isar_insertPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
        ffi.Uint32,
        ffi.Pointer<ffi.Pointer<CIsarWriter>>,
      )
    >
  >('isar_insert');
  late final _isar_insert =
      _isar_insertPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CIsarWriter>>,
            )
          >();

  int isar_insert_save(ffi.Pointer<CIsarWriter> insert, int id) {
    return _isar_insert_save(insert, id);
  }

  late final _isar_insert_savePtr = _lookup<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<CIsarWriter>, IsarI64)>
  >('isar_insert_save');
  late final _isar_insert_save =
      _isar_insert_savePtr
          .asFunction<int Function(ffi.Pointer<CIsarWriter>, int)>();

  int isar_insert_finish(
    ffi.Pointer<CIsarWriter> insert,
    ffi.Pointer<ffi.Pointer<CIsarTxn>> txn,
  ) {
    return _isar_insert_finish(insert, txn);
  }

  late final _isar_insert_finishPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarWriter>,
        ffi.Pointer<ffi.Pointer<CIsarTxn>>,
      )
    >
  >('isar_insert_finish');
  late final _isar_insert_finish =
      _isar_insert_finishPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarWriter>,
              ffi.Pointer<ffi.Pointer<CIsarTxn>>,
            )
          >();

  void isar_insert_abort(ffi.Pointer<CIsarWriter> insert) {
    return _isar_insert_abort(insert);
  }

  late final _isar_insert_abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CIsarWriter>)>>(
        'isar_insert_abort',
      );
  late final _isar_insert_abort =
      _isar_insert_abortPtr
          .asFunction<void Function(ffi.Pointer<CIsarWriter>)>();

  ffi.Pointer<ffi.Char> isar_version() {
    return _isar_version();
  }

  late final _isar_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'isar_version',
      );
  late final _isar_version =
      _isar_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<CIsarInstance> isar_get_instance(int instance_id, bool sqlite) {
    return _isar_get_instance(instance_id, sqlite);
  }

  late final _isar_get_instancePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarInstance> Function(ffi.Uint32, ffi.Bool)
    >
  >('isar_get_instance');
  late final _isar_get_instance =
      _isar_get_instancePtr
          .asFunction<ffi.Pointer<CIsarInstance> Function(int, bool)>();

  int isar_open_instance(
    ffi.Pointer<ffi.Pointer<CIsarInstance>> isar,
    int instance_id,
    ffi.Pointer<CString> name,
    ffi.Pointer<CString> path,
    bool sqlite,
    ffi.Pointer<CString> schema_json,
    int max_size_mib,
    ffi.Pointer<CString> encryption_key,
    int compact_min_file_size,
    int compact_min_bytes,
    double compact_min_ratio,
  ) {
    return _isar_open_instance(
      isar,
      instance_id,
      name,
      path,
      sqlite,
      schema_json,
      max_size_mib,
      encryption_key,
      compact_min_file_size,
      compact_min_bytes,
      compact_min_ratio,
    );
  }

  late final _isar_open_instancePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<ffi.Pointer<CIsarInstance>>,
        ffi.Uint32,
        ffi.Pointer<CString>,
        ffi.Pointer<CString>,
        ffi.Bool,
        ffi.Pointer<CString>,
        ffi.Uint32,
        ffi.Pointer<CString>,
        ffi.Uint32,
        ffi.Uint32,
        ffi.Float,
      )
    >
  >('isar_open_instance');
  late final _isar_open_instance =
      _isar_open_instancePtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Pointer<CIsarInstance>>,
              int,
              ffi.Pointer<CString>,
              ffi.Pointer<CString>,
              bool,
              ffi.Pointer<CString>,
              int,
              ffi.Pointer<CString>,
              int,
              int,
              double,
            )
          >();

  int isar_get_name(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> name,
  ) {
    return _isar_get_name(isar, name);
  }

  late final _isar_get_namePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
      )
    >
  >('isar_get_name');
  late final _isar_get_name =
      _isar_get_namePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            )
          >();

  int isar_get_dir(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> dir,
  ) {
    return _isar_get_dir(isar, dir);
  }

  late final _isar_get_dirPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
      )
    >
  >('isar_get_dir');
  late final _isar_get_dir =
      _isar_get_dirPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            )
          >();

  int isar_change_encryption_key(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CString> encryption_key,
  ) {
    return _isar_change_encryption_key(isar, encryption_key);
  }

  late final _isar_change_encryption_keyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CString>)
    >
  >('isar_change_encryption_key');
  late final _isar_change_encryption_key =
      _isar_change_encryption_keyPtr
          .asFunction<
            int Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CString>)
          >();

  int isar_txn_begin(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<ffi.Pointer<CIsarTxn>> txn,
    bool write,
  ) {
    return _isar_txn_begin(isar, txn, write);
  }

  late final _isar_txn_beginPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<ffi.Pointer<CIsarTxn>>,
        ffi.Bool,
      )
    >
  >('isar_txn_begin');
  late final _isar_txn_begin =
      _isar_txn_beginPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<ffi.Pointer<CIsarTxn>>,
              bool,
            )
          >();

  int isar_txn_commit(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
  ) {
    return _isar_txn_commit(isar, txn);
  }

  late final _isar_txn_commitPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>)
    >
  >('isar_txn_commit');
  late final _isar_txn_commit =
      _isar_txn_commitPtr
          .asFunction<
            int Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>)
          >();

  void isar_txn_abort(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
  ) {
    return _isar_txn_abort(isar, txn);
  }

  late final _isar_txn_abortPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>)
    >
  >('isar_txn_abort');
  late final _isar_txn_abort =
      _isar_txn_abortPtr
          .asFunction<
            void Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>)
          >();

  int isar_auto_increment(
    ffi.Pointer<CIsarInstance> isar,
    int collection_index,
  ) {
    return _isar_auto_increment(isar, collection_index);
  }

  late final _isar_auto_incrementPtr = _lookup<
    ffi.NativeFunction<IsarI64 Function(ffi.Pointer<CIsarInstance>, ffi.Uint16)>
  >('isar_auto_increment');
  late final _isar_auto_increment =
      _isar_auto_incrementPtr
          .asFunction<int Function(ffi.Pointer<CIsarInstance>, int)>();

  int isar_cursor(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
    ffi.Pointer<ffi.Pointer<CIsarCursor>> cursor,
  ) {
    return _isar_cursor(isar, txn, collection_index, cursor);
  }

  late final _isar_cursorPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
        ffi.Pointer<ffi.Pointer<CIsarCursor>>,
      )
    >
  >('isar_cursor');
  late final _isar_cursor =
      _isar_cursorPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              int,
              ffi.Pointer<ffi.Pointer<CIsarCursor>>,
            )
          >();

  int isar_delete(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
    int id,
    ffi.Pointer<ffi.Bool> deleted,
  ) {
    return _isar_delete(isar, txn, collection_index, id, deleted);
  }

  late final _isar_deletePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
        IsarI64,
        ffi.Pointer<ffi.Bool>,
      )
    >
  >('isar_delete');
  late final _isar_delete =
      _isar_deletePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              int,
              int,
              ffi.Pointer<ffi.Bool>,
            )
          >();

  int isar_count(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_count(isar, txn, collection_index, count);
  }

  late final _isar_countPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
        ffi.Pointer<ffi.Uint32>,
      )
    >
  >('isar_count');
  late final _isar_count =
      _isar_countPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              int,
              ffi.Pointer<ffi.Uint32>,
            )
          >();

  int isar_clear(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
  ) {
    return _isar_clear(isar, txn, collection_index);
  }

  late final _isar_clearPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
      )
    >
  >('isar_clear');
  late final _isar_clear =
      _isar_clearPtr
          .asFunction<
            int Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>, int)
          >();

  int isar_get_size(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
    bool include_indexes,
  ) {
    return _isar_get_size(isar, txn, collection_index, include_indexes);
  }

  late final _isar_get_sizePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
        ffi.Bool,
      )
    >
  >('isar_get_size');
  late final _isar_get_size =
      _isar_get_sizePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              int,
              bool,
            )
          >();

  int isar_import_json(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<ffi.Pointer<CIsarTxn>> txn,
    int collection_index,
    ffi.Pointer<CString> json,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_import_json(isar, txn, collection_index, json, count);
  }

  late final _isar_import_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<ffi.Pointer<CIsarTxn>>,
        ffi.Uint16,
        ffi.Pointer<CString>,
        ffi.Pointer<ffi.Uint32>,
      )
    >
  >('isar_import_json');
  late final _isar_import_json =
      _isar_import_jsonPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<ffi.Pointer<CIsarTxn>>,
              int,
              ffi.Pointer<CString>,
              ffi.Pointer<ffi.Uint32>,
            )
          >();

  int isar_copy(ffi.Pointer<CIsarInstance> isar, ffi.Pointer<CString> path) {
    return _isar_copy(isar, path);
  }

  late final _isar_copyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CString>)
    >
  >('isar_copy');
  late final _isar_copy =
      _isar_copyPtr
          .asFunction<
            int Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CString>)
          >();

  int isar_verify(ffi.Pointer<CIsarInstance> isar, ffi.Pointer<CIsarTxn> txn) {
    return _isar_verify(isar, txn);
  }

  late final _isar_verifyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>)
    >
  >('isar_verify');
  late final _isar_verify =
      _isar_verifyPtr
          .asFunction<
            int Function(ffi.Pointer<CIsarInstance>, ffi.Pointer<CIsarTxn>)
          >();

  int isar_close(ffi.Pointer<CIsarInstance> isar, bool delete_) {
    return _isar_close(isar, delete_);
  }

  late final _isar_closePtr = _lookup<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<CIsarInstance>, ffi.Bool)>
  >('isar_close');
  late final _isar_close =
      _isar_closePtr
          .asFunction<int Function(ffi.Pointer<CIsarInstance>, bool)>();

  int isar_query_new(
    ffi.Pointer<CIsarInstance> isar,
    int collection_index,
    ffi.Pointer<ffi.Pointer<CIsarQueryBuilder>> query_builder,
  ) {
    return _isar_query_new(isar, collection_index, query_builder);
  }

  late final _isar_query_newPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Uint16,
        ffi.Pointer<ffi.Pointer<CIsarQueryBuilder>>,
      )
    >
  >('isar_query_new');
  late final _isar_query_new =
      _isar_query_newPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              int,
              ffi.Pointer<ffi.Pointer<CIsarQueryBuilder>>,
            )
          >();

  void isar_query_set_filter(
    ffi.Pointer<CIsarQueryBuilder> builder,
    ffi.Pointer<CFilter> filter,
  ) {
    return _isar_query_set_filter(builder, filter);
  }

  late final _isar_query_set_filterPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarQueryBuilder>, ffi.Pointer<CFilter>)
    >
  >('isar_query_set_filter');
  late final _isar_query_set_filter =
      _isar_query_set_filterPtr
          .asFunction<
            void Function(ffi.Pointer<CIsarQueryBuilder>, ffi.Pointer<CFilter>)
          >();

  void isar_query_add_sort(
    ffi.Pointer<CIsarQueryBuilder> builder,
    int property_index,
    bool ascending,
    bool case_sensitive,
  ) {
    return _isar_query_add_sort(
      builder,
      property_index,
      ascending,
      case_sensitive,
    );
  }

  late final _isar_query_add_sortPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CIsarQueryBuilder>,
        ffi.Uint16,
        ffi.Bool,
        ffi.Bool,
      )
    >
  >('isar_query_add_sort');
  late final _isar_query_add_sort =
      _isar_query_add_sortPtr
          .asFunction<
            void Function(ffi.Pointer<CIsarQueryBuilder>, int, bool, bool)
          >();

  void isar_query_add_distinct(
    ffi.Pointer<CIsarQueryBuilder> builder,
    int property_index,
    bool case_sensitive,
  ) {
    return _isar_query_add_distinct(builder, property_index, case_sensitive);
  }

  late final _isar_query_add_distinctPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarQueryBuilder>, ffi.Uint16, ffi.Bool)
    >
  >('isar_query_add_distinct');
  late final _isar_query_add_distinct =
      _isar_query_add_distinctPtr
          .asFunction<
            void Function(ffi.Pointer<CIsarQueryBuilder>, int, bool)
          >();

  ffi.Pointer<CIsarQuery> isar_query_build(
    ffi.Pointer<CIsarQueryBuilder> builder,
  ) {
    return _isar_query_build(builder);
  }

  late final _isar_query_buildPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarQuery> Function(ffi.Pointer<CIsarQueryBuilder>)
    >
  >('isar_query_build');
  late final _isar_query_build =
      _isar_query_buildPtr
          .asFunction<
            ffi.Pointer<CIsarQuery> Function(ffi.Pointer<CIsarQueryBuilder>)
          >();

  int isar_query_cursor(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CIsarQuery> query,
    ffi.Pointer<ffi.Pointer<CIsarQueryCursor>> cursor,
    int offset,
    int limit,
  ) {
    return _isar_query_cursor(isar, txn, query, cursor, offset, limit);
  }

  late final _isar_query_cursorPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Pointer<CIsarQuery>,
        ffi.Pointer<ffi.Pointer<CIsarQueryCursor>>,
        ffi.Uint32,
        ffi.Uint32,
      )
    >
  >('isar_query_cursor');
  late final _isar_query_cursor =
      _isar_query_cursorPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CIsarQuery>,
              ffi.Pointer<ffi.Pointer<CIsarQueryCursor>>,
              int,
              int,
            )
          >();

  int isar_query_aggregate(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CIsarQuery> query,
    int aggregation,
    int property_index,
    ffi.Pointer<ffi.Pointer<CIsarValue>> value,
  ) {
    return _isar_query_aggregate(
      isar,
      txn,
      query,
      aggregation,
      property_index,
      value,
    );
  }

  late final _isar_query_aggregatePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Pointer<CIsarQuery>,
        ffi.Uint8,
        ffi.Uint16,
        ffi.Pointer<ffi.Pointer<CIsarValue>>,
      )
    >
  >('isar_query_aggregate');
  late final _isar_query_aggregate =
      _isar_query_aggregatePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CIsarQuery>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CIsarValue>>,
            )
          >();

  int isar_query_delete(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CIsarQuery> query,
    int offset,
    int limit,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_query_delete(isar, txn, query, offset, limit, count);
  }

  late final _isar_query_deletePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Pointer<CIsarQuery>,
        ffi.Uint32,
        ffi.Uint32,
        ffi.Pointer<ffi.Uint32>,
      )
    >
  >('isar_query_delete');
  late final _isar_query_delete =
      _isar_query_deletePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CIsarQuery>,
              int,
              int,
              ffi.Pointer<ffi.Uint32>,
            )
          >();

  void isar_query_free(ffi.Pointer<CIsarQuery> query) {
    return _isar_query_free(query);
  }

  late final _isar_query_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CIsarQuery>)>>(
        'isar_query_free',
      );
  late final _isar_query_free =
      _isar_query_freePtr.asFunction<void Function(ffi.Pointer<CIsarQuery>)>();

  int isar_read_id(ffi.Pointer<CIsarReader> reader) {
    return _isar_read_id(reader);
  }

  late final _isar_read_idPtr =
      _lookup<ffi.NativeFunction<IsarI64 Function(ffi.Pointer<CIsarReader>)>>(
        'isar_read_id',
      );
  late final _isar_read_id = _isar_read_idPtr
      .asFunction<int Function(ffi.Pointer<CIsarReader>)>(isLeaf: true);

  int isar_read_null(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_null(reader, index);
  }

  late final _isar_read_nullPtr = _lookup<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<CIsarReader>, ffi.Uint32)>
  >('isar_read_null');
  late final _isar_read_null = _isar_read_nullPtr
      .asFunction<int Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  int isar_read_bool(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_bool(reader, index);
  }

  late final _isar_read_boolPtr = _lookup<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<CIsarReader>, ffi.Uint32)>
  >('isar_read_bool');
  late final _isar_read_bool = _isar_read_boolPtr
      .asFunction<int Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  int isar_read_byte(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_byte(reader, index);
  }

  late final _isar_read_bytePtr = _lookup<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<CIsarReader>, ffi.Uint32)>
  >('isar_read_byte');
  late final _isar_read_byte = _isar_read_bytePtr
      .asFunction<int Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  int isar_read_int(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_int(reader, index);
  }

  late final _isar_read_intPtr = _lookup<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CIsarReader>, ffi.Uint32)>
  >('isar_read_int');
  late final _isar_read_int = _isar_read_intPtr
      .asFunction<int Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  double isar_read_float(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_float(reader, index);
  }

  late final _isar_read_floatPtr = _lookup<
    ffi.NativeFunction<ffi.Float Function(ffi.Pointer<CIsarReader>, ffi.Uint32)>
  >('isar_read_float');
  late final _isar_read_float = _isar_read_floatPtr
      .asFunction<double Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  int isar_read_long(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_long(reader, index);
  }

  late final _isar_read_longPtr = _lookup<
    ffi.NativeFunction<IsarI64 Function(ffi.Pointer<CIsarReader>, ffi.Uint32)>
  >('isar_read_long');
  late final _isar_read_long = _isar_read_longPtr
      .asFunction<int Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  double isar_read_double(ffi.Pointer<CIsarReader> reader, int index) {
    return _isar_read_double(reader, index);
  }

  late final _isar_read_doublePtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(ffi.Pointer<CIsarReader>, ffi.Uint32)
    >
  >('isar_read_double');
  late final _isar_read_double = _isar_read_doublePtr
      .asFunction<double Function(ffi.Pointer<CIsarReader>, int)>(isLeaf: true);

  int isar_read_string(
    ffi.Pointer<CIsarReader> reader,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> value,
    ffi.Pointer<ffi.Bool> is_ascii,
  ) {
    return _isar_read_string(reader, index, value, is_ascii);
  }

  late final _isar_read_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarReader>,
        ffi.Uint32,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
        ffi.Pointer<ffi.Bool>,
      )
    >
  >('isar_read_string');
  late final _isar_read_string = _isar_read_stringPtr.asFunction<
    int Function(
      ffi.Pointer<CIsarReader>,
      int,
      ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
      ffi.Pointer<ffi.Bool>,
    )
  >(isLeaf: true);

  ffi.Pointer<CIsarReader> isar_read_object(
    ffi.Pointer<CIsarReader> reader,
    int index,
  ) {
    return _isar_read_object(reader, index);
  }

  late final _isar_read_objectPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarReader> Function(ffi.Pointer<CIsarReader>, ffi.Uint32)
    >
  >('isar_read_object');
  late final _isar_read_object = _isar_read_objectPtr.asFunction<
    ffi.Pointer<CIsarReader> Function(ffi.Pointer<CIsarReader>, int)
  >(isLeaf: true);

  int isar_read_list(
    ffi.Pointer<CIsarReader> reader,
    int index,
    ffi.Pointer<ffi.Pointer<CIsarReader>> list_reader,
  ) {
    return _isar_read_list(reader, index, list_reader);
  }

  late final _isar_read_listPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarReader>,
        ffi.Uint32,
        ffi.Pointer<ffi.Pointer<CIsarReader>>,
      )
    >
  >('isar_read_list');
  late final _isar_read_list = _isar_read_listPtr.asFunction<
    int Function(
      ffi.Pointer<CIsarReader>,
      int,
      ffi.Pointer<ffi.Pointer<CIsarReader>>,
    )
  >(isLeaf: true);

  int isar_read_to_json(
    ffi.Pointer<CIsarReader> reader,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<ffi.Uint32> buffer_size,
  ) {
    return _isar_read_to_json(reader, buffer, buffer_size);
  }

  late final _isar_read_to_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarReader>,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
        ffi.Pointer<ffi.Uint32>,
      )
    >
  >('isar_read_to_json');
  late final _isar_read_to_json = _isar_read_to_jsonPtr.asFunction<
    int Function(
      ffi.Pointer<CIsarReader>,
      ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
      ffi.Pointer<ffi.Uint32>,
    )
  >(isLeaf: true);

  void isar_read_free(ffi.Pointer<CIsarReader> reader) {
    return _isar_read_free(reader);
  }

  late final _isar_read_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CIsarReader>)>>(
        'isar_read_free',
      );
  late final _isar_read_free = _isar_read_freePtr
      .asFunction<void Function(ffi.Pointer<CIsarReader>)>(isLeaf: true);

  int isar_update(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    int collection_index,
    int id,
    ffi.Pointer<CIsarUpdate> update,
    ffi.Pointer<ffi.Bool> updated,
  ) {
    return _isar_update(isar, txn, collection_index, id, update, updated);
  }

  late final _isar_updatePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Uint16,
        IsarI64,
        ffi.Pointer<CIsarUpdate>,
        ffi.Pointer<ffi.Bool>,
      )
    >
  >('isar_update');
  late final _isar_update =
      _isar_updatePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              int,
              int,
              ffi.Pointer<CIsarUpdate>,
              ffi.Pointer<ffi.Bool>,
            )
          >();

  int isar_query_update(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CIsarQuery> query,
    int offset,
    int limit,
    ffi.Pointer<CIsarUpdate> update,
    ffi.Pointer<ffi.Uint32> updated,
  ) {
    return _isar_query_update(isar, txn, query, offset, limit, update, updated);
  }

  late final _isar_query_updatePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarTxn>,
        ffi.Pointer<CIsarQuery>,
        ffi.Uint32,
        ffi.Uint32,
        ffi.Pointer<CIsarUpdate>,
        ffi.Pointer<ffi.Uint32>,
      )
    >
  >('isar_query_update');
  late final _isar_query_update =
      _isar_query_updatePtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CIsarQuery>,
              int,
              int,
              ffi.Pointer<CIsarUpdate>,
              ffi.Pointer<ffi.Uint32>,
            )
          >();

  ffi.Pointer<CIsarUpdate> isar_update_new() {
    return _isar_update_new();
  }

  late final _isar_update_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CIsarUpdate> Function()>>(
        'isar_update_new',
      );
  late final _isar_update_new =
      _isar_update_newPtr.asFunction<ffi.Pointer<CIsarUpdate> Function()>();

  void isar_update_add_value(
    ffi.Pointer<CIsarUpdate> update,
    int property_index,
    ffi.Pointer<CIsarValue> value,
  ) {
    return _isar_update_add_value(update, property_index, value);
  }

  late final _isar_update_add_valuePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CIsarUpdate>,
        ffi.Uint16,
        ffi.Pointer<CIsarValue>,
      )
    >
  >('isar_update_add_value');
  late final _isar_update_add_value =
      _isar_update_add_valuePtr
          .asFunction<
            void Function(
              ffi.Pointer<CIsarUpdate>,
              int,
              ffi.Pointer<CIsarValue>,
            )
          >();

  ffi.Pointer<CIsarValue> isar_value_bool(bool value) {
    return _isar_value_bool(value);
  }

  late final _isar_value_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CIsarValue> Function(ffi.Bool)>>(
        'isar_value_bool',
      );
  late final _isar_value_bool = _isar_value_boolPtr
      .asFunction<ffi.Pointer<CIsarValue> Function(bool)>(isLeaf: true);

  ffi.Pointer<CIsarValue> isar_value_integer(int value) {
    return _isar_value_integer(value);
  }

  late final _isar_value_integerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CIsarValue> Function(IsarI64)>>(
        'isar_value_integer',
      );
  late final _isar_value_integer = _isar_value_integerPtr
      .asFunction<ffi.Pointer<CIsarValue> Function(int)>(isLeaf: true);

  ffi.Pointer<CIsarValue> isar_value_real(double value) {
    return _isar_value_real(value);
  }

  late final _isar_value_realPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CIsarValue> Function(ffi.Double)>>(
        'isar_value_real',
      );
  late final _isar_value_real = _isar_value_realPtr
      .asFunction<ffi.Pointer<CIsarValue> Function(double)>(isLeaf: true);

  ffi.Pointer<CIsarValue> isar_value_string(ffi.Pointer<CString> value) {
    return _isar_value_string(value);
  }

  late final _isar_value_stringPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<CIsarValue> Function(ffi.Pointer<CString>)>
  >('isar_value_string');
  late final _isar_value_string = _isar_value_stringPtr
      .asFunction<ffi.Pointer<CIsarValue> Function(ffi.Pointer<CString>)>(
        isLeaf: true,
      );

  int isar_value_get_bool(ffi.Pointer<CIsarValue> value) {
    return _isar_value_get_bool(value);
  }

  late final _isar_value_get_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<CIsarValue>)>>(
        'isar_value_get_bool',
      );
  late final _isar_value_get_bool = _isar_value_get_boolPtr
      .asFunction<int Function(ffi.Pointer<CIsarValue>)>(isLeaf: true);

  int isar_value_get_integer(ffi.Pointer<CIsarValue> value) {
    return _isar_value_get_integer(value);
  }

  late final _isar_value_get_integerPtr =
      _lookup<ffi.NativeFunction<IsarI64 Function(ffi.Pointer<CIsarValue>)>>(
        'isar_value_get_integer',
      );
  late final _isar_value_get_integer = _isar_value_get_integerPtr
      .asFunction<int Function(ffi.Pointer<CIsarValue>)>(isLeaf: true);

  double isar_value_get_real(ffi.Pointer<CIsarValue> value) {
    return _isar_value_get_real(value);
  }

  late final _isar_value_get_realPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<CIsarValue>)>>(
        'isar_value_get_real',
      );
  late final _isar_value_get_real = _isar_value_get_realPtr
      .asFunction<double Function(ffi.Pointer<CIsarValue>)>(isLeaf: true);

  int isar_value_get_string(
    ffi.Pointer<CIsarValue> value,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> str,
  ) {
    return _isar_value_get_string(value, str);
  }

  late final _isar_value_get_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<CIsarValue>,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
      )
    >
  >('isar_value_get_string');
  late final _isar_value_get_string = _isar_value_get_stringPtr.asFunction<
    int Function(ffi.Pointer<CIsarValue>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
  >(isLeaf: true);

  void isar_value_free(ffi.Pointer<CIsarValue> value) {
    return _isar_value_free(value);
  }

  late final _isar_value_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CIsarValue>)>>(
        'isar_value_free',
      );
  late final _isar_value_free = _isar_value_freePtr
      .asFunction<void Function(ffi.Pointer<CIsarValue>)>(isLeaf: true);

  int isar_watch_collection(
    ffi.Pointer<CIsarInstance> isar,
    int collection_index,
    int port,
    ffi.Pointer<ffi.Pointer<CWatchHandle>> handle,
  ) {
    return _isar_watch_collection(isar, collection_index, port, handle);
  }

  late final _isar_watch_collectionPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Uint16,
        DartPort,
        ffi.Pointer<ffi.Pointer<CWatchHandle>>,
      )
    >
  >('isar_watch_collection');
  late final _isar_watch_collection =
      _isar_watch_collectionPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CWatchHandle>>,
            )
          >();

  int isar_watch_object(
    ffi.Pointer<CIsarInstance> isar,
    int collection_index,
    int id,
    int port,
    ffi.Pointer<ffi.Pointer<CWatchHandle>> handle,
  ) {
    return _isar_watch_object(isar, collection_index, id, port, handle);
  }

  late final _isar_watch_objectPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Uint16,
        ffi.Int64,
        DartPort,
        ffi.Pointer<ffi.Pointer<CWatchHandle>>,
      )
    >
  >('isar_watch_object');
  late final _isar_watch_object =
      _isar_watch_objectPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CWatchHandle>>,
            )
          >();

  int isar_watch_query(
    ffi.Pointer<CIsarInstance> isar,
    ffi.Pointer<CIsarQuery> query,
    int port,
    ffi.Pointer<ffi.Pointer<CWatchHandle>> handle,
  ) {
    return _isar_watch_query(isar, query, port, handle);
  }

  late final _isar_watch_queryPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<CIsarInstance>,
        ffi.Pointer<CIsarQuery>,
        DartPort,
        ffi.Pointer<ffi.Pointer<CWatchHandle>>,
      )
    >
  >('isar_watch_query');
  late final _isar_watch_query =
      _isar_watch_queryPtr
          .asFunction<
            int Function(
              ffi.Pointer<CIsarInstance>,
              ffi.Pointer<CIsarQuery>,
              int,
              ffi.Pointer<ffi.Pointer<CWatchHandle>>,
            )
          >();

  void isar_stop_watching(ffi.Pointer<CWatchHandle> handle) {
    return _isar_stop_watching(handle);
  }

  late final _isar_stop_watchingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CWatchHandle>)>>(
        'isar_stop_watching',
      );
  late final _isar_stop_watching =
      _isar_stop_watchingPtr
          .asFunction<void Function(ffi.Pointer<CWatchHandle>)>();

  void isar_write_null(ffi.Pointer<CIsarWriter> writer, int index) {
    return _isar_write_null(writer, index);
  }

  late final _isar_write_nullPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32)>
  >('isar_write_null');
  late final _isar_write_null = _isar_write_nullPtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int)>(isLeaf: true);

  void isar_write_bool(ffi.Pointer<CIsarWriter> writer, int index, bool value) {
    return _isar_write_bool(writer, index, value);
  }

  late final _isar_write_boolPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32, ffi.Bool)
    >
  >('isar_write_bool');
  late final _isar_write_bool = _isar_write_boolPtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int, bool)>(
        isLeaf: true,
      );

  void isar_write_byte(ffi.Pointer<CIsarWriter> writer, int index, int value) {
    return _isar_write_byte(writer, index, value);
  }

  late final _isar_write_bytePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32, ffi.Uint8)
    >
  >('isar_write_byte');
  late final _isar_write_byte = _isar_write_bytePtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int, int)>(
        isLeaf: true,
      );

  void isar_write_int(ffi.Pointer<CIsarWriter> writer, int index, int value) {
    return _isar_write_int(writer, index, value);
  }

  late final _isar_write_intPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32, ffi.Int32)
    >
  >('isar_write_int');
  late final _isar_write_int = _isar_write_intPtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int, int)>(
        isLeaf: true,
      );

  void isar_write_float(
    ffi.Pointer<CIsarWriter> writer,
    int index,
    double value,
  ) {
    return _isar_write_float(writer, index, value);
  }

  late final _isar_write_floatPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32, ffi.Float)
    >
  >('isar_write_float');
  late final _isar_write_float = _isar_write_floatPtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int, double)>(
        isLeaf: true,
      );

  void isar_write_long(ffi.Pointer<CIsarWriter> writer, int index, int value) {
    return _isar_write_long(writer, index, value);
  }

  late final _isar_write_longPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32, IsarI64)
    >
  >('isar_write_long');
  late final _isar_write_long = _isar_write_longPtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int, int)>(
        isLeaf: true,
      );

  void isar_write_double(
    ffi.Pointer<CIsarWriter> writer,
    int index,
    double value,
  ) {
    return _isar_write_double(writer, index, value);
  }

  late final _isar_write_doublePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Uint32, ffi.Double)
    >
  >('isar_write_double');
  late final _isar_write_double = _isar_write_doublePtr
      .asFunction<void Function(ffi.Pointer<CIsarWriter>, int, double)>(
        isLeaf: true,
      );

  void isar_write_string(
    ffi.Pointer<CIsarWriter> writer,
    int index,
    ffi.Pointer<CString> value,
  ) {
    return _isar_write_string(writer, index, value);
  }

  late final _isar_write_stringPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CIsarWriter>,
        ffi.Uint32,
        ffi.Pointer<CString>,
      )
    >
  >('isar_write_string');
  late final _isar_write_string = _isar_write_stringPtr.asFunction<
    void Function(ffi.Pointer<CIsarWriter>, int, ffi.Pointer<CString>)
  >(isLeaf: true);

  void isar_write_byte_list(
    ffi.Pointer<CIsarWriter> writer,
    int index,
    ffi.Pointer<ffi.Uint8> value,
    int length,
  ) {
    return _isar_write_byte_list(writer, index, value, length);
  }

  late final _isar_write_byte_listPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CIsarWriter>,
        ffi.Uint32,
        ffi.Pointer<ffi.Uint8>,
        ffi.Uint32,
      )
    >
  >('isar_write_byte_list');
  late final _isar_write_byte_list = _isar_write_byte_listPtr.asFunction<
    void Function(ffi.Pointer<CIsarWriter>, int, ffi.Pointer<ffi.Uint8>, int)
  >(isLeaf: true);

  ffi.Pointer<CIsarWriter> isar_write_object(
    ffi.Pointer<CIsarWriter> writer,
    int index,
  ) {
    return _isar_write_object(writer, index);
  }

  late final _isar_write_objectPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarWriter> Function(ffi.Pointer<CIsarWriter>, ffi.Uint32)
    >
  >('isar_write_object');
  late final _isar_write_object = _isar_write_objectPtr.asFunction<
    ffi.Pointer<CIsarWriter> Function(ffi.Pointer<CIsarWriter>, int)
  >(isLeaf: true);

  void isar_write_object_end(
    ffi.Pointer<CIsarWriter> writer,
    ffi.Pointer<CIsarWriter> embedded_writer,
  ) {
    return _isar_write_object_end(writer, embedded_writer);
  }

  late final _isar_write_object_endPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Pointer<CIsarWriter>)
    >
  >('isar_write_object_end');
  late final _isar_write_object_end = _isar_write_object_endPtr.asFunction<
    void Function(ffi.Pointer<CIsarWriter>, ffi.Pointer<CIsarWriter>)
  >(isLeaf: true);

  ffi.Pointer<CIsarWriter> isar_write_list(
    ffi.Pointer<CIsarWriter> writer,
    int index,
    int length,
  ) {
    return _isar_write_list(writer, index, length);
  }

  late final _isar_write_listPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<CIsarWriter> Function(
        ffi.Pointer<CIsarWriter>,
        ffi.Uint32,
        ffi.Uint32,
      )
    >
  >('isar_write_list');
  late final _isar_write_list = _isar_write_listPtr.asFunction<
    ffi.Pointer<CIsarWriter> Function(ffi.Pointer<CIsarWriter>, int, int)
  >(isLeaf: true);

  void isar_write_list_end(
    ffi.Pointer<CIsarWriter> writer,
    ffi.Pointer<CIsarWriter> list_writer,
  ) {
    return _isar_write_list_end(writer, list_writer);
  }

  late final _isar_write_list_endPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<CIsarWriter>, ffi.Pointer<CIsarWriter>)
    >
  >('isar_write_list_end');
  late final _isar_write_list_end = _isar_write_list_endPtr.asFunction<
    void Function(ffi.Pointer<CIsarWriter>, ffi.Pointer<CIsarWriter>)
  >(isLeaf: true);
}

final class CIsarCursor extends ffi.Opaque {}

final class CIsarInstance extends ffi.Opaque {}

final class CIsarQuery extends ffi.Opaque {}

final class CIsarQueryBuilder extends ffi.Opaque {}

final class CIsarQueryCursor extends ffi.Opaque {}

final class CIsarReader extends ffi.Opaque {}

final class CIsarTxn extends ffi.Opaque {}

final class CIsarUpdate extends ffi.Opaque {}

final class CIsarWriter extends ffi.Opaque {}

final class CFilter extends ffi.Opaque {}

final class CIsarValue extends ffi.Opaque {}

final class CString extends ffi.Opaque {}

final class CWatchHandle extends ffi.Opaque {}

typedef IsarI64 = ffi.Int64;
typedef DartIsarI64 = int;
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

const int ERROR_PATH = 1;

const int ERROR_WRITE_TXN_REQUIRED = 2;

const int ERROR_VERSION = 3;

const int ERROR_OBJECT_LIMIT_REACHED = 4;

const int ERROR_INSTANCE_MISMATCH = 5;

const int ERROR_ENCRYPTION = 6;

const int ERROR_DB_FULL = 7;

const int AGGREGATION_COUNT = 0;

const int AGGREGATION_IS_EMPTY = 1;

const int AGGREGATION_MIN = 2;

const int AGGREGATION_MAX = 3;

const int AGGREGATION_SUM = 4;

const int AGGREGATION_AVERAGE = 5;
